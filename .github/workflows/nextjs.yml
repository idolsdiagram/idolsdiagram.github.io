# Sample workflow for building and deploying a Next.js site to GitHub Pages
#
# To get started with Next.js see: https://nextjs.org/docs/getting-started
#
name: Deploy Next.js site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  schedule:
    - cron: '0 15 * * *'
    - cron: '55 2 * * *'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    environment: github-pages
    env:
      NEXT_PUBLIC_INDEX_JSON_URL: ${{ vars.NEXT_PUBLIC_INDEX_JSON_URL }}
      NEXT_PUBLIC_MEMBER_JSON_URL: ${{ vars.NEXT_PUBLIC_MEMBER_JSON_URL }}
      NEXT_PUBLIC_AD_JSON_URL: ${{ vars.NEXT_PUBLIC_AD_JSON_URL }}
      NEXT_PUBLIC_DIAGRAM_FORM: ${{ vars.NEXT_PUBLIC_DIAGRAM_FORM }}
      NEXT_PUBLIC_ONEMAN_FORM: ${{ vars.NEXT_PUBLIC_ONEMAN_FORM }}
      NEXT_PUBLIC_DIAGRAM_IMAGE: ${{ vars.NEXT_PUBLIC_DIAGRAM_IMAGE }}
      NEXT_PUBLIC_MEATADATA_TITLE: ${{ vars.NEXT_PUBLIC_MEATADATA_TITLE }}
      NEXT_PUBLIC_MEATADATA_DESCRIPTION: ${{ vars.NEXT_PUBLIC_MEATADATA_DESCRIPTION }}
      NEXT_PUBLIC_MEATADATA_IMAGE_URL: ${{ vars.NEXT_PUBLIC_MEATADATA_IMAGE_URL }}
      ONEMAN_JSON_URL: ${{ secrets.ONEMAN_JSON_URL }}
      ONEMAN_JSON_URL2: ${{ secrets.ONEMAN_JSON_URL2 }}
      SITE_URL: ${{ secrets.SITE_URL }}
      GA_MEASUREMENT_ID: ${{ secrets.GA_MEASUREMENT_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
      - name: Setup Pages
        uses: actions/configure-pages@v3
        with:
          # Automatically inject basePath in your Next.js configuration file and disable
          # server side image optimization (https://nextjs.org/docs/api-reference/next/image#unoptimized).
          #
          # You may remove this line if you want to manage the configuration yourself.
          static_site_generator: next
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      - name: Build with Next.js
        env:
          TZ: 'Asia/Tokyo'
        run: ${{ steps.detect-package-manager.outputs.runner }} next build
      - name: Sitemap export with next-sitemap
        run: ${{ steps.detect-package-manager.outputs.runner }} next-sitemap --config next-sitemap.config.js
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: ./out

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy]
    steps:
      - name: Clean up
        run: echo "Clean up"